# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IqydHZYXYQuThU2gtQDgjL34u-vKZSLS
"""

# train.py
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from joblib import dump

# --------------------
# Load dataset
# --------------------
df = pd.read_csv("activity_dataset.csv")

# Features & target
X = df[["Activity", "Duration_min", "Speed_kmph", "Weight_kg"]]
y = df["Calories"]

# --------------------
# Train-test split
# --------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Encode categorical
encoder = OneHotEncoder(sparse_output=False, handle_unknown="ignore")
X_train_cat = encoder.fit_transform(X_train[["Activity"]])
X_test_cat = encoder.transform(X_test[["Activity"]])

# Scale numeric
scaler = StandardScaler()
X_train_num = scaler.fit_transform(X_train[["Duration_min", "Speed_kmph", "Weight_kg"]])
X_test_num = scaler.transform(X_test[["Duration_min", "Speed_kmph", "Weight_kg"]])

# Combine
X_train_final = np.hstack([X_train_num, X_train_cat])
X_test_final = np.hstack([X_test_num, X_test_cat])

# --------------------
# Train model
# --------------------
model = RandomForestRegressor(n_estimators=200, random_state=42)
model.fit(X_train_final, y_train)

# --------------------
# Evaluate
# --------------------
y_pred = model.predict(X_test_final)
print("MSE:", mean_squared_error(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("R2 Score:", r2_score(y_test, y_pred))

# --------------------
# Save artifacts
# --------------------
dump(model, "model.joblib")
dump(encoder, "encoder.joblib")
dump(scaler, "scaler.joblib")

# Save Actual vs Predicted plot
plt.figure(figsize=(6, 4))
plt.scatter(y_test, y_pred, alpha=0.7, color="blue")
plt.plot([y.min(), y.max()], [y.min(), y.max()], "r--")
plt.xlabel("Actual Calories")
plt.ylabel("Predicted Calories")
plt.title("Actual vs Predicted Calories")
plt.grid(True)
plt.tight_layout()
plt.savefig("actual_vs_predicted.png")
plt.close()